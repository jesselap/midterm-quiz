DROP TABLE IF EXISTS users CASCADE;
DROP TABLE IF EXISTS categories CASCADE;
DROP TABLE IF EXISTS quizes CASCADE;
DROP TABLE IF EXISTS questions CASCADE;
DROP TABLE IF EXISTS attempts CASCADE;
DROP TABLE IF EXISTS ratings CASCADE;

CREATE TABLE users (
  id SERIAL PRIMARY KEY NOT NULL,
  name VARCHAR(255) NOT NULL,
  email VARCHAR(255) NOT NULL,
  password VARCHAR(255) NOT NULL
);

CREATE TABLE categories (
  id SERIAL PRIMARY KEY NOT NULL,
  type VARCHAR(255) NOT NULL
);

CREATE TABLE quizes (
  id SERIAL PRIMARY KEY NOT NULL,
  owner_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
  category_id INTEGER REFERENCES categories(id) ON DELETE CASCADE,
  image_url VARCHAR(255),
  title VARCHAR(255) NOT NULL,
  created_at TIMESTAMP DEFAULT now(),
  public BOOLEAN NOT NULL DEFAULT TRUE
);

CREATE TABLE questions (
  id SERIAL PRIMARY KEY NOT NULL,
  quiz_id INTEGER REFERENCES quizes(id) ON DELETE CASCADE,
  question TEXT NOT NULL,
  answer TEXT NOT NULL,
  choice_a TEXT NOT NULL,
  choice_b TEXT NOT NULL,
  choice_c TEXT NOT NULL
);

CREATE TABLE attempts (
  id SERIAL PRIMARY KEY NOT NULL,
  user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
  quiz_id INTEGER REFERENCES quizes(id) ON DELETE CASCADE,
  score INTEGER,
  attempted_at TIMESTAMP DEFAULT now()
);

CREATE TABLE ratings (
  id SERIAL PRIMARY KEY NOT NULL,
  user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
  quiz_id INTEGER REFERENCES quizes(id) ON DELETE CASCADE,
  rating SMALLINT NOT NULL DEFAULT 0
);

GRANT SELECT ON users TO PUBLIC;
GRANT SELECT ON categories TO PUBLIC;
GRANT SELECT ON quizes TO PUBLIC;
GRANT SELECT ON questions TO PUBLIC;
GRANT SELECT ON attempts TO PUBLIC;
GRANT SELECT ON ratings TO PUBLIC;

GRANT ALL ON users_id_seq to labber;
GRANT ALL ON attempts_id_seq to labber;
